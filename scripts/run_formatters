#!/usr/bin/env bash

set -o errexit
set -o nounset

# Runs clang-format and rustfmt on the entire codebase.
# Use -a option to apply the formattings, otherwise the script just runs a check.
# Exit codes if option -a is not present:
#  - 1 there are files to be formatted.
#  - 0 everything looks fine.
# If -a is set, the return code is always 0.

# Parse optionns (-h and -a).
APPLY_FORMATTING=false
while getopts "ha" opt; do
  case "$opt" in
  h|\?)
    echo "Use -a option to apply the formatting."
    exit 0
    ;;
  a)
    APPLY_FORMATTING=true
    ;;
  esac
done

# Get CPU count.
OS=$(uname)
NPROC=1
if [[ $OS = "Linux" ]] ; then
  NPROC=$(nproc)
elif [[ ${OS} = "Darwin" ]] ; then
  NPROC=$(sysctl -n hw.physicalcpu)
fi

if [ "$APPLY_FORMATTING" = true ] ; then
  # Apply the formatting by passing -i to clang-format, then exit with 0.
  find oak examples -type f -name '*.h' -o -name '*.cc' -o -name '*.proto' \
    | xargs -I{} -P ${NPROC} clang-format -i -style=file {}
  find examples rust -type f -name '*.rs' | xargs -I{} -P ${NPROC} rustfmt {}
  exit 0
fi

# We ask clang-format to generate an XML output with the deisred formattings.
# We check if any replacement tag exists in the output.
CLANG_FORMAT_EXIT_CODE=0
find oak examples -type f -name '*.h' -o -name '*.cc' -o -name '*.proto' \
  | xargs -I{} -P ${NPROC} clang-format -style=file -output-replacements-xml {} \
  | grep "<replacement " >/dev/null \
  && CLANG_FORMAT_EXIT_CODE=$? || CLANG_FORMAT_EXIT_CODE=$?

# Fortunately, rustfmt has the --check option that will make it exit with 1
# if formatting has to be applied.
RUSTFMT_EXIT_CODE=0
find examples rust -type f -name '*.rs' | xargs -I{} -P ${NPROC} rustfmt --check {} \
  && RUSTFMT_EXIT_CODE=$? || RUSTFMT_EXIT_CODE=$?

# When looking for clang-format "replacement" tags, grep will return 0 if it 
# has found anything and 1 if not, so here we'll invert the return code to
# indicate an error when the formatting is insufficient. Rustfmt behaves as
# expected.
if [ $CLANG_FORMAT_EXIT_CODE -ne 1 ] || [ $RUSTFMT_EXIT_CODE -ne 0 ]; then 
  echo "Codebase violates formatting conventions, please fix."
  exit 1
else
  exit 0
fi
